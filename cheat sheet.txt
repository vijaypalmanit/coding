df.rename(columns = {‘temperature’: ‘temp’, ‘event’:’eventtype’}) -- how to rename columns in a dataframe

df[df.event.isin([‘Rain’,’Sunny’])] -- how to filter Data by multiple categories

df.select_dtypes(include=['float64', 'int64']) -- how to select dataframe with specific datatypes

df.select_dtypes(ixclude=['object'])

data.salary.cat.reorder_categories(['low','medium','high'])   -- how to reorder categories

level_map = {1: 'high', 2: 'medium', 3: 'low'}
df['c_level'] = df['c'].map(level_map) 

df[df['ID'].isin(['A001','C022',...])]

data.salary = data.salary.cat.codes -- convert categories into numbers

data['churn'].value_counts(normalize=True)*100 -- percentage of each category

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=42)  -- how to split train test data

data.dropna(axis='columns',how='all',inplace=True)  -- How to drop the columns with all NA values 


---------- How to find the best parameter for model (Hyperparameter tuning)-----
depth = [i for i in range(5,21,1)]

samples = [i for i in range(50,500,50)]

parameters = dict(max_depth=depth, min_samples_leaf=samples)

from sklearn.model_selection import GridSearchCV

param_search = GridSearchCV(model, parameters)

param_search.fit(features_train, target_train)

print(param_search.best_params_)

-------------------------------------------------------------------------------

data.groupby('month')[['duration']].sum()    -- how to get dataframe output after pandas aggrgation

grouped = df.groupby('customer')

grouped.groups  -- how to list groups in groupby object

grouped.get_group('Aaron Hendrickson') -- how to find a specific group in groupby object

grouped.size() - find the size of each group

df.groupby(pd.Grouper(key='Date',freq='Y')).size()  -- Group by year

OUT:
Date
2014-12-31    19956
2015-12-31    20054
2016-12-31    20133
2017-12-31    20079
2018-12-31    19778


df.groupby(df['Sales Rep'].str.split(' ').str[0]).size() --Group by the first name of sales rep

df.groupby(df['Sales Rep'].apply(lambda x: 'William' in x)).size() --Grouping by whether or not there is a “William” in the name of the rep

df.groupby('state').agg({'crime':[sum,mean,count],
						 'district':'first',
						 'date':lambda x: max(x)-1})  -- how to apply multiple functions to columns
						 
						 

df.groupby('state').agg(total_no_of_crimes=('crime','sum'),
						 first_district_in_data=('district','first'),
						 day_before_last_day=('date',lambda x: max(x)-1))    -- how to rename aggregated columns
						 
						 
						 
df.groupby([1, 1]).agg(foo=('A', lambda x: x.max()), bar=('A', lambda x: x.min())) -- error is raised when same source column is used with multiple lambdas



df['filled_weight'] = df.groupby('gender')['weight'].transform(lambda grp: grp.fillna(np.mean(grp)) --How to Fill missing values with the group’s mean
)



df.groupby([df.index.year, df.index.quarter])["co"].agg(["max", "min"]).rename_axis(["year", "quarter"]) -- how to rename aggragated columns

df.groupby("outlet", sort=False)["title"].apply(lambda ser: ser.str.contains("Fed").sum()).nlargest(10)  -- how to list top ten results


-------------------------------------------------------------------------------
pandas datatypes
----------------
object : This data type is used for strings (i.e., sequences of characters)
int64 
float64 
bool 
datetime64
timedelta : Used to represent the difference between datetimes
category




pd.to_numeric(df['column'],errors='ignore') -- how to ignore errors while converting datatypes
pd.to_numeric(df['column'],errors='coerce') -- how to turn the offending values into np.nan values while converting datatypes

invoices['Date of Meal'] = pd.to_datetime(invoices['Date of Meal'],format='%Y%d%m') -- how to convert to datetime



-------------------------------------------------------------------------------
There are three different accessors:
.dt
.str
.cat

startswith(<substring>), endswith(<substring>), contains(<substring>) checks for the presence of a substring


---------------preparing for machine learning interview questions in python------



